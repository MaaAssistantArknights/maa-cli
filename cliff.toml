[changelog]
# changelog header
header = """
# Release Notes\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% for group in ["Features", "Bug Fixes", "Performance",
"Refactor", "Documentation", "Testing", "Miscellaneous", "Security", "Revert"] -%}
    {% set grouped_commits = commits | filter(attribute="group", value=group) -%}
    {% if grouped_commits | length > 0 -%}
        ## {{ group }}\n
        {% for commit in grouped_commits -%}
          - {% if commit.breaking %}**BREAKING**: {% endif -%}
            {{ commit.message | upper_first }}
        {% endfor -%}
        {{ "" }}
    {% endif -%}
{% endfor -%}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# replace the patterns in the commit message
commit_preprocessors = [
  { pattern = '\(#([0-9]+)\)', replace = "([#${1}](https://github.com/MaaAssistantArknights/maa-cli/issues/${1}))" },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "Features" },
  { message = "^fix", group = "Bug Fixes" },
  { message = "^perf", group = "Performance" },
  { message = "^refactor", group = "Refactor" },
  { message = "^doc", group = "Documentation" },
  { message = "^test", group = "Testing" },
  { message = "^style", skip = true },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^ci", skip = true },
  { message = "^chore", group = "Miscellaneous" },

  { body = ".*security", group = "Security" },
  { message = "^[Rr]evert", group = "Revert" },

  { message = "^Bump", skip = true },
] # regex for parsing and grouping commits
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "^v[0-9]+.[0-9]+.[0-9]+$"
# regex for skipping tags
# skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
# ignore_tags = "v[0-9].[0-9].[0-9]-beta.*"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
