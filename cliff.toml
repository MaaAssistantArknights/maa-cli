[changelog]
# changelog header
header = """
# Release Notes\n
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{%- macro version_title() -%}
  {%- if version -%}
    Release {{ version | trim_start_matches(pat="v") }}
  {%- else -%}
    {%- set version = get_env(name="MAA_VERSION", default="") -%}
    {%- if version -%}
      Release {{ version | trim_start_matches(pat="v") }}
    {%- else -%}
      Unreleased
    {%- endif -%}
  {%- endif -%}
{%- endmacro -%}

{%- macro pr_link(pr) -%}
  [#{{ pr }}]({{ self::remote_url() }}/pull/{{ pr }})
{%- endmacro -%}

{%- macro format_commit(commit) -%}
  {%- if commit.breaking -%} **BREAKING**: {%- endif -%}
  {{ commit.message | upper_first }}
  {%- if commit.github.username %} by @{{ commit.github.username }} {%- endif -%}
  {%- if commit.github.pr_number %} \
    in {{ self::pr_link(pr=commit.github.pr_number) }}
  {%- endif -%}
{%- endmacro -%}

{%- macro current_ref() -%}
  {%- if version -%}
    {{ version }}
  {%- else -%}
    {{ get_env(name="MAA_TAG", default="main") }}
  {%- endif -%}
{%- endmacro -%}

{%- macro full_changelog(prev, current) -%}
  **Full Changelog**: <{{ self::remote_url() }}/compare/{{ prev }}...{{ current }}>
{%- endmacro -%}

## {{ self::version_title()  }}

{% for group, commits in commits | group_by(attribute="group") -%}
    {%- if commits | length > 0 -%}
        ### {{ group | striptags | trim | upper_first }}\n
        {% for commit in commits -%}
          - {{ self::format_commit(commit = commit) }}
        {% endfor -%}
        {{ "\n" }}
    {%- endif -%}
{%- endfor -%}

{%- if previous.version -%}
  {{ self::full_changelog(prev=previous.version, current=self::current_ref()) }}\n
{% endif -%}
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# replace the patterns in the commit message
commit_preprocessors = [
  { pattern = ' \(#([0-9]+)\)', replace = "" }, # remove pr references
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->Features" },
  { message = "^fix", group = "<!-- 1 -->Bug Fixes" },
  { message = "^perf", group = "<!-- 2 -->Performance" },
  { message = "^pref", group = "<!-- 2 -->Performance" },  # a typo of "perf"
  { message = "^refactor", group = "<!-- 3 -->Refactor" },
  { message = "^doc", group = "<!-- 4 -->Documentation" },
  { message = "^test", group = "<!-- 5 -->Testing" },

  { body = ".*security", group = "<!-- 6 --> Security" },
  { message = "^[Rr]evert", group = "<!-- 7 --> Revert" },

  # skip code style changes
  { message = "^style", skip = true },
  { message = "^chore\\(style\\)", skip = true },
  { message = "^chore\\(format\\)", skip = true },
  { message = "^chore:.*format", skip = true },

  # skip release preparation commits and dependency updates
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps\\)", skip = true },
  { message = "^[Bb]ump", skip = true },
  { message = "^chore: bump", skip = true },

  # skip ci commits
  { message = "^ci", skip = true },

  # skip changelog commits
  { message = "^chore\\(changelog\\)", skip = true },
  { message = "^chore: update changelog", skip = true },

  # chore should be the last one to avoid overriding above rules
  { message = "^chore", group = "<!-- 99 -->Miscellaneous" },
] # regex for parsing and grouping commits
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# glob pattern for matching git tags
tag_pattern = "^v[0-9]+.[0-9]+.[0-9]+$"
# regex for skipping tags
# skip_tags = "v0.1.0-beta.1"
# regex for ignoring tags
# ignore_tags = "v[0-9].[0-9].[0-9]-beta.*"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[remote.github]
owner = "MaaAssistantArknights"
repo = "maa-cli"
