name: Setup Cross Compilation Toolchains
description: Setup Cross Compilation Toolchains for Rust and C
inputs:
  target_arch:
    description: Target architecture
    required: false
    default: ${{ runner.arch }}

runs:
  using: composite
  steps:
    - name: Compute Target Triple
      shell: bash
      env:
        OS: ${{ runner.os }}
        TARGET_ARCH: ${{ inputs.target_arch }}
      run: |
        case "$OS" in
          Linux)
            suffix="unknown-linux-gnu"
            ;;
          macOS)
            suffix="apple-darwin"
            ;;
          Windows)
            suffix="pc-windows-msvc"
            ;;
          *)
            echo "Unknown target OS: $OS"
            exit 1
            ;;
        esac

        case "$TARGET_ARCH" in
          ARM64|aarch64)
            target="aarch64-$suffix"
            ;;
          X64|x86_64)
            target="x86_64-$suffix"
            ;;
          *)
            echo "Unknown target architecture: $TARGET_ARCH"
            exit 1
            ;;
        esac

        echo "CARGO_BUILD_TARGET=$target" >> $GITHUB_ENV
    - name: Setup Rust Target
      shell: bash
      run: rustup target add $CARGO_BUILD_TARGET
    - name: Setup Cross Compiling Toolchain (gcc and libc for aarch64 on x86_64 Linux)
      if: >
        inputs.target_arch == 'aarch64' &&
          inputs.host_arch == 'x86_64' &&
          startsWith(inputs.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "CFLAGS_aarch64_unknown_linux_gnu=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    - name: Setup Cross Compiling Toolchain (LLVM for aarch64 on x86_64 Windows)
      if: >
        inputs.target_arch == 'aarch64' &&
          inputs.host_arch == 'x86_64' &&
          startsWith(inputs.os, 'windows')
      shell: powershell
      run: |
        Add-Content $env:GITHUB_PATH "C:\Program Files (x86)\Microsoft Visual Studio\2022\Enterprise\VC\Tools\Llvm\x64\bin"
