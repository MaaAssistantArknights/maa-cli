name: Setup Cross Compilation Toolchains
description: Setup Cross Compilation Toolchains for Rust and C
inputs:
  os:
    description: Host and target OS # cross system compilation are not supported
    required: true
  host_arch:
    description: Host architecture
    required: false
    default: "x86_64"
  target_arch:
    description: Target architecture # default to host architecture
    required: false
    default: "x86_64"

runs:
  using: composite
  steps:
    - name: Compute Target Triple
      shell: bash
      env:
        TARGET_OS: ${{ inputs.os }}
        TARGET_ARCH: ${{ inputs.target_arch }}
      run: |
        case "$TARGET_OS" in
          ubuntu*)
            target="$TARGET_ARCH-unknown-linux-gnu"
            ;;
          macos*)
            target="$TARGET_ARCH-apple-darwin"
            ;;
          windows*)
            target="$TARGET_ARCH-pc-windows-msvc"
            ;;
          *)
            echo "Unknown target OS: $TARGET_OS"
            exit 1
            ;;
        esac
        echo "CARGO_BUILD_TARGET=$target" >> $GITHUB_ENV
    - name: Setup Cross Compiling Toolchain (Rust)
      if: inputs.host_arch != inputs.target_arch
      shell: bash
      run: rustup target add $CARGO_BUILD_TARGET
    - name: Setup Cross Compiling Toolchain (gcc and libc for aarch64 on x86_64 Linux)
      if: >
        inputs.target_arch == 'aarch64' &&
          inputs.host_arch == 'x86_64' &&
          startsWith(inputs.os, 'ubuntu')
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          gcc-aarch64-linux-gnu \
          libc6-dev-arm64-cross
        echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
        echo "CFLAGS_aarch64_unknown_linux_gnu=--sysroot=/usr/aarch64-linux-gnu" >> $GITHUB_ENV
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
