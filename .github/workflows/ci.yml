name: CI

on:
  push:
    branches: [ "main" ]
    paths:
      - "maa-helper/**"
      - "maa-runner/**"
      - "maa-sys/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "maa-helper/**"
      - "maa-runner/**"
      - "maa-sys/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/ci.yml"

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            triplet: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            triplet: aarch64-unknown-linux-gnu
          - os: macos-latest
            triplet: x86_64-apple-darwin
          - os: macos-latest
            triplet: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v3
      - name: Setup Rust
        run: |
          rustup target add ${{ matrix.triplet }}
      - name: Install MaaCore with maa-updater
        env:
          MAA_API_URL: https://github.com/MaaAssistantArknights/MaaRelease/raw/main/MaaAssistantArknights/api/version
        run: cargo run --target ${{ matrix.triplet }} --locked --bin maa -- install stable
      - name: Build
        run: cargo build --target ${{ matrix.triplet }} --workspace --locked
      - name: Install clippy and rustfmt
        if: matrix.os == 'ubuntu-latest'
        run: rustup component add clippy rustfmt
      - name: Lint (clippy)
        if: matrix.os == 'ubuntu-latest'
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Lint (rustfmt)
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt --all --check
      - name: Test
        run: cargo test --all-targets --all-features
      - name: Try to run maa-runner
        run: cargo run --bin maa-run -- version
      - name: Try to run relocated
        run: |
          old_data_path="$(cargo run --bin maa -- dir data)"
          echo "Old lib path: $old_lib_path"
          new_data_path="$PWD/data"
          mv "$old_data_path" "$new_data_path"
          MAA_DATA_DIR="$new_data_path" cargo run --bin maa -- version
